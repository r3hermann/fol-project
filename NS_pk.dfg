begin_problem(needham_schroeder_asimmetrico_in_FOL).

list_of_descriptions.
name({*needham schroeder public key protocol*}).
author({*Ermanno Calafiore*}).
status(unknown).
description({*needham schroeder asymmetric*}).
end_of_list.


list_of_symbols.
	
	functions[(sent,3), (pair,2), (encr,2), (key,2), (PKa,0), (PKb,0), (PKttp,0), (SKttp,0),  (a,0), (t,0), (b,0), (na,0), (nb,0)].
		
	predicates[(Message,1), (Sid,1), (Ak,1), (Bk,1), (Tk,1), (Nonce,2), (Sa,1), (Sb,1)].

end_of_list.

list_of_formulae(axioms).


%USER A

	%A deteniene la PK del ttp
	formula( Ak(key(PKttp, t)) ).
	


	%1
	% A vuole comunicare con B e fa richiesta al TTP. A mette in storage
	% l'identita' con cui vuole comunicare
	
	formula(and (Message(sent(a, t, pair(a,b))), Sa(b) )).
    
    
    %3
    % A, salva in storage na associata ad xb per verificare se al passo 6 del protocollo
    % e da questo momento deteniene la PK di xb
	formula( forall( [xt, xPKttp, xPKb, xb], implies( and (Message(sent(xt, a, encr( pair( xPKb, xb), SKttp) )), Ak(key(xPKttp, xt)) ),
										and( Message(sent( a, b, encr( pair(na, a), PKb))), Sa(pair(xb, na)), Ak(key(xPKb, xb))) ))).
	
	
	%7 A riceve la nonce di xb e la conserva, fa un check per verificare se la propria nonce e'
	% la stessa che aveva mandato in origine ad xb
	
	formula( forall( [xb, xna, xnb, xPKa, xPKb], implies( and( Message( sent( xb, a, encr( pair(xna, xnb), xPKa))), Sa(pair(xb, xna))),  
									and ( Message( sent( a, xb, encr(xnb, xPKb))), Nonce(xnb, xb)) ))).
									

%SERVER TTP

	%TTP detiene le Pubkey di A e B
	formula( and( Tk(key(PKa, a)), Tk(key(PKb, b)) )).
	
	
	%2
	% il TTP riceve una richiesta di comunicazione per un certo xb
	
	formula( forall( [xa, xb, xPKb], implies( and(Message(sent(xa, t, pair(xa, xb))), Tk(key(xPKb,xb)) ),
									  Message(sent(t, xa, encr( pair( xPKb, xb), SKttp)) ) ) )).
									  
	
	%5
	% richiesta di un certo xb della chiave xPKa
	
	formula( forall( [xb, xa, xPKa, xPKb], implies( and( Message(sent(xb, t, pair(xb, xa))), Tk(key(xPKa, xa)), Tk(key(xPKb, xb))),
										Message( sent(t, xb, encr( pair( xPKa, xa), SKttp))) ))).

%USER B

	% B deteniene la PK del ttp
	formula( Bk(key(PKttp, t)) ).	
	
	% la nonce di xa e' fresh per B
	%Bf(na)
	

	
	%4
	% B riceve un messaggio da xa, vede che Ã¨ di A e richiede la sua chiave pubblica al server,
	% inoltre B conserva in storage la nonce xna di xa
	
	formula( forall( [xa, xna], implies( Message( sent( xa, b, encr( pair(xna, xa), PKb))),
											 and( Message( sent( b, t, pair(b, xa) ) ), Sb(pair(xna, xa))) ))).
											 

	%6 
	formula( forall( [xa, xna, xSKttp, xt, xPKa], implies( Message(sent( xt, b, encr( pair( xPKa, xa), xSKttp))),
												and ( Message(sent( b, xa, encr( pair(xna, nb), xPKa))), Sb(pair(xa,nb))) ))).
												
												
	%end
	formula( forall( [xa, xnb, xna, xb, xPKb], implies( and ( Message( sent ( xa, b, encr( xnb, PKb))), Sb(pair(xa, xnb))),
														Nonce(xna, xb) ))).
														
end_of_list.


list_of_formulae(conjectures).

	%formula( exists ( [x], and ( Nonce(x, b), Nonce(x, a))) ).
	
	formula( and (Nonce(nb, a), Nonce(na, b))).



end_of_list.

end_problem.
